<?php/** * Clase que nos permite administrar lo relacionado a la tabla mujeres_avanzando * **/ //Incluimos librería Paginadorinclude_once($_SESSION['inc_path'].'libs/Paginador.php');//Incluimos librería de fechainclude_once($_SESSION['inc_path'].'libs/Fechas.php');class mujeresAvanzando extends MysqliDb{    public function __construct(){}              /**      * Ejecutamos sentencia sql con parámetros      * @param string $sql Sentencia SQL      * @param array $params Cada uno de los parámetros de la sentencia      *       * @return int Resultado      **/       private static function executar($sql,$params){      //Ejecutamos      $resultado = self::getInstance()->rawQuery($sql, $params);      //Regresamos resultado      return $resultado;            }        /**     * Obtenemos la última sentencia ejecutada     * @return string $sql con parámetros     */    private static function ultimoQuery(){      //Ejecutamos      $resultado = "Última Sentencia: ".self::getInstance()->getLastQuery();            //Regresamos resultado      return $resultado;    }    /**    * Obtenemos los datos del aspirante por su id de entrevista    *@param int $id_mujeres_avanzando id de la tabla aspirante    *    *@return Array datos de aspirante    **/    public static function get_by_id_entr($id_entrevista){        $datos = self::getInstance()->where('id_entrevista', $id_entrevista)                                    ->getOne('mujeres_avanzando');        return $datos;    }  /**  * Obtenemos datos para llenar la cartilla  * @param Array $articulos Arreglo con los artículos  *  * @return Array datos de cartilla  **/  public static function datos_cartilla($articulos){        //Obtenemos los id de cada beneficiaria    foreach($articulos->articulo_id as $key => $value):    $lista.='"'.$value.'",';    endforeach;            //Quitamos última coma    $lista=substr($lista,0,-1);    $sql = 'SELECT            mj.*,            case WHEN (LENGTH(mj.num_folio) > 1) THEN                       CONCAT(mj.folio,?,mj.num_folio)ELSE                      mj.folio            end as folio_compuesto,            TIMESTAMPDIFF(YEAR, mj.fecha_nacimiento, CURDATE()) AS edad,            IFNULL(g.grado,?) as grado,            m.NOM_MUN as municipio            FROM mujeres_avanzando mj            LEFT JOIN grado g on g.id = mj.id_grado            LEFT JOIN cat_municipio m on m.CVE_ENT_MUN = concat(mj.id_cat_estado,mj.id_cat_municipio)            where mj.folio IN ('.$lista.') or             CONCAT(mj.folio,?,mj.num_folio) IN ('.$lista.') ';            $params = array('-',"(SIN ESPECIFICAR)",'-');     return self::executar($sql,$params);      }      /**      * Obtenemos datos de beneficiarias de una carvana      * @param Array $articulos Arreglo con los artículos      **/     public static function datos_caravana($id_caravana){               $sql= 'SELECT             m.nombres,            m.paterno,            m.materno,            m.curp            FROM `mujeres_avanzando` m            where m.id_caravana = ?                          ';                $params = array($id_caravana);        return self::executar($sql,$params);                     }            /**     * Obtenemos los datos del aspirante por su id     * @param  int $id_mujeres_avanzando id de la tabla aspirante     * @param  int $folio Buscamos mediante folio     * @return Array datos de aspirante     */    public static function get_by_id($id_mujeres_avanzando = NULL,$folio = NULL){       /*        $datos = self::getInstance()->join("grado g", "g.id = m.id_grado", "LEFT")                                    ->join("cat_municipio cm", "cm.CVE_MUN = m.id_cat_municipio and cm.CVE_ENT = 14", "LEFT")                                    ->where('m.id', $id_mujeres_avanzando)                                    ->getOne('mujeres_avanzando m', null, "m.*, g.grado, cm.NOM_MUN as municipio_nom");                                           return $datos;        */    $sql = ' SELECT              m.*,              concat(ifnull(m.nombres,?),?,ifnull(m.paterno,?),?,ifnull(m.materno,?)) as nombre_completo,              TIMESTAMPDIFF(YEAR, m.fecha_nacimiento, CURDATE()) AS edad,                            mpo.NOM_MUN,                            case WHEN (LENGTH(m.num_folio) > 1) THEN                       CONCAT(m.folio,?,m.num_folio)ELSE                      m.folio              end as folio_compuesto,              IFNULL(g.grado,?) as grado,              IFNULL(ec.elcsa,?) as desc_elcsa,              IFNULL(nv.nivel,?) as nivel_desc,              IFNULL(cd.calidad_dieta,?) as calidad_desc,              IFNULL(dv.diversidad,?) as diversidad_desc,              IFNULL(va.variedad,?) as variedad_desc              from mujeres_avanzando m              left join cat_municipio mpo on m.id_cat_municipio = mpo.CVE_MUN                                 and mpo.CVE_ENT = m.CVE_EDO_RES                                              and mpo.CVE_ENT_MUN = CONCAT(14,mpo.CVE_MUN)              LEFT JOIN grado g on g.id = m.id_grado              LEFT JOIN elcsa ec on ec.id = m.elcsa              LEFT JOIN nivel_socioeconomico nv on nv.id = m.nivel              LEFT JOIN calidad_dieta cd on cd.id = m.calidad_dieta              LEFT JOIN diversidad dv on dv.id = m.diversidad              LEFT JOIN variedad va on va.id = m.variedad              where 1 ';    $params = array('',' ','',' ','','-','(SIN ESPECIFICAR)','(SIN ESPECIFICAR)','(SIN ESPECIFICAR)','(SIN ESPECIFICAR)','(SIN ESPECIFICAR)','(SIN ESPECIFICAR)');         //Filtramos por ID        if($id_mujeres_avanzando != NULL){            $sql .= ' AND m.id = ?';            $params[] = $id_mujeres_avanzando;        }        //Filtramos por Folio        if($folio != NULL){            $porciones = explode("-", $folio);            switch (count($porciones)) {              case 2: case 4:                //Obtenemos el folio y el numero de folio                $sql .= ' AND CONCAT(m.folio,?,m.num_folio) = ?';                $params[] = "-";                $params[] = $folio;                break;              default:                //No tiene guiones                $sql .= ' AND m.folio = ? AND (m.num_folio = 0 OR m.num_folio IS NULL) ';                    $params[] = $folio;                break;            }        }     $datos = self::executar($sql,$params);      $datos = $datos [0];     //echo $sql;     //echo self::ultimoQuery();     return $datos;            }    /**     * Actualizamos los datos referentes a la actualización del     * @param  [type] $mujeres_avanzando    [description]     * @param  [type] $id_mujeres_avanzando [description]     * @return int $msg_no Mensaje de retorno     */    public static function actualizaGIA($mujeres_avanzando,$id_mujeres_avanzando = NULL){        //Variable que nos indica el mensaje generado al guardar el registro        $msg_no = 0;              //Obtenemos el id del usuario que modifica        $id_usuario = $_SESSION['usr_id'];        /*Obtenemos cada una de las variables enviadas vía POST y las asignamos        a su respectiva variable. Por ejemplo         $id = $_POST['id'], $nombre = $_POST['nombre']*/        foreach($mujeres_avanzando as $key => $value):        ${$key} = self::getInstance()->real_escape_string($value);        endforeach;        //Campos obligatorios        if($id_grado && $nivel && $calidad_dieta && $diversidad &&          $variedad && $elcsa){              //Preparamos update            self::getInstance()->where('id',$id_mujeres_avanzando);            //datos a actualizar            $updateData = array('id_grado' => $id_grado,                                'nivel' => $nivel,                                'calidad_dieta' => $calidad_dieta,                                'diversidad' => $diversidad,                                'variedad' => $variedad,                                'elcsa'=> $elcsa,                                'fecha_ultima_mod' => date('Y-m-d h:i:s'),                                'id_usuario_ultima_mod' => $id_usuario                                );            //Iniciamos transacción            self::getInstance()->startTransaction();                    if(!self::getInstance()->update('mujeres_avanzando',$updateData)){                //'Error al guardar, NO se guardo el registro'                $msg_no = 3;                 //Cancelamos los posibles campos afectados                self::getInstance()->rollback();            }else{                //Campos guardados correctamente                $msg_no = 1;                           //Guardamos campos afectados en la tabla                self::getInstance()->commit();                     }         }                return $msg_no;    }     /**    * Actualizamos la fecha en que tomamos la foto    * @param  int $id_mujeres_avanzando ID de la tabla mujeres_avanzando    * @param  int $num_folio Número consecutivo de un folio repetido    * @return int $msg_no Mensaje de retorno    */    public static function actualizaFoto($folio,$num_folio = NULL){        //Variable que nos indica el mensaje generado al guardar el registro        $msg_no = 0;             //Preparamos update        self::getInstance()->where('folio',$folio);        if($num_folio != NULL){            self::getInstance()->where('num_folio',$num_folio);        }        //datos a actualizar        $updateData = array('fecha_foto' => date('Y-m-d h:i:s'));        //Iniciamos transacción        self::getInstance()->startTransaction();                if(!self::getInstance()->update('mujeres_avanzando',$updateData)){            //'Error al guardar, NO se guardo el registro'            $msg_no = 3;             //Cancelamos los posibles campos afectados            self::getInstance()->rollback();        }else{            //Campos guardados correctamente            $msg_no = 1;                       //Guardamos campos afectados en la tabla            self::getInstance()->commit();                 }                 return $msg_no;    }   /**    * Cambiamos el estatus de la beneficiaria    * @param  int $id_mujeres_avanzando ID de la tabla mujeres_avanzando    * @return int $msg_no Mensaje de retorno    */    public static function activaMujer($id_mujeres_avanzando){        //Variable que nos indica el mensaje generado al guardar el registro        $msg_no = 0;        //Variable donde guardamos el estatus        $estatus = 0;        //Sentencia para obtener el campo activo de la tabla Submódulo        $sql = 'SELECT activo from `mujeres_avanzando` where id = ?';         //parámetros para la consulta        $params = array($id_mujeres_avanzando);                        //Verificamos el estatus del Modulo                $registro = self::executar($sql,$params);        $registro = $registro[0];        //Si el registro tiene estatus de 'Eliminado', se activará        if($registro['activo'] == 0){            $estatus = 1;        }else if($registro['activo'] == 1){        //Si el registro tiene estatus de 'Activo', se eliminará            $estatus = 0;        }        //Preparamos update        self::getInstance()->where('id',$id_mujeres_avanzando);                                                        //datos a actualizar        $updateData = array('activo' => $estatus);        //Iniciamos transacción        self::getInstance()->startTransaction();                if(!self::getInstance()->update('mujeres_avanzando',$updateData)){            //'Error al guardar, NO se guardo el registro'            $msg_no = 3;             //Cancelamos los posibles campos afectados            self::getInstance()->rollback();        }else{            //Campos guardados correctamente            $msg_no = 1;                       //Guardamos campos afectados en la tabla            self::getInstance()->commit();                 }         return $msg_no;    }    /**     * Función que nos generará un listado genérico     * @param  String $busqueda    Búsqueda a realizar     * @param  String $tipo_filtro Tipo de filtro para la búsqueda     * @param  int $activo Determinamos si queremos los activos, inactivos o ambos (predeterminado)     * @param  String $nombre  Nombre a buscar     * @param  String $paterno Apellido paterno a buscar     * @param  String $materno Apellido materno a buscar     * @param  String $curp  CURP a buscar     * @param  int $id_mujer Búsqueda por ID de la tabla mujeres_avanzando     * @param  int $id_caravana Búsqueda por ID de la tabla caravana     * @return Array Listado con los filtros aplicados     */     public static function listaMujerGenerica($busqueda=NULL,$tipo_filtro=NULL,      $activo = NULL,$nombre=null,$paterno=null,$materno=null,$curp=null,      $id_mujer=NULL,$id_caravana=NULL,$soundex = NULL){                 $sql =         'SELECT        b.id,        b.nombres,        b.paterno,        b.materno,        concat(ifnull(b.nombres,?),?,ifnull(b.paterno,?),?,ifnull(b.materno,?)) as nombre_completo,                b.num_ext as num_ext,        b.num_int as num_int,        b.curp,        est.NOM_ENT as estado,        mpo.NOM_MUN as municipio,        ev.nombre as estado_civil,        b.fecha_nacimiento,        b.genero,        IF(b.activo = 1,?,?) as es_activo,        b.activo,        CONCAT(c.descripcion,?,IFNULL(t.tipo_importacion,?),?) as nom_caravana,        b.ocupacion,        b.folio,        b.num_folio,        case WHEN (LENGTH(b.num_folio) > 1) THEN CONCAT(b.folio,?,b.num_folio)ELSE        b.folio        end as folio_compuesto,        b.calle,        b.id_caravana        FROM `mujeres_avanzando` b        left join cat_estado est on b.CVE_EDO_RES = est.CVE_ENT        left join cat_municipio mpo on b.id_cat_municipio = mpo.CVE_MUN                                 and mpo.CVE_ENT = b.CVE_EDO_RES        left join estado_civil ev on b.id_estado_civil = ev.id        LEFT JOIN caravana c on c.id = b.id_caravana        LEFT JOIN tipo_lugar t on t.id = c.id_tipo_lugar         where ? ';        //Parámetros de la sentencia        $params = array('',' ','',' ','','SI','NO',' (',' ',')','-',1);        //Filtro de búsqueda        if ($busqueda !==NULL && $tipo_filtro !==NULL){             switch($tipo_filtro){                                case 'nombre':                 $alias=' concat(ifnull(b.nombres,?),?,ifnull(b.paterno,?),?,ifnull(b.materno,?)) ';                 $params = array_merge($params,array('',' ','',' ',''));                 $sql .=  ' AND '.$alias.' LIKE ? ';                 $params[] = '%'.$busqueda.'%';                                       break;                 case 'folio':                 $sql .= ' AND b.folio LIKE ? ';                 $params[] = '%'.$busqueda.'%';                            break;                case 'calle':                 $sql .= ' AND b.calle LIKE ? ';                 $params[] = '%'.$busqueda.'%';                           break;                    case 'caravana':                 $sql .= ' AND c.descripcion LIKE ? ';                 $params[] = '%'.$busqueda.'%';                    break;                                    }        }                 //Buscamos nombre propio                   if($nombre !=null){                              $sql .= ' AND b.nombres like ? ';          $params[] = '%'.$nombre.'%';            }        //Apellido paterno        if($paterno !=null){          //echo $paterno;          //exit;                      $sql .= ' AND b.paterno like ? ';          $params[] = '%'.$paterno.'%';            }        //Apellido materno        if($materno !=null){          $sql .= ' AND b.materno like ? ';             $params[] = '%'.$materno.'%';            }                //Curp        if($curp !=null){          $sql .= ' AND b.curp = ? ';             $params[] = $curp;            }        //Verificamos si se quieren filtrar los activos/inactivos        if($activo !== NULL){            $sql .= ' AND b.activo = ?';            $params[] = $activo;        }                //Filtramos por ID de mujer        if($id_mujer !== NULL){            $sql .= ' AND b.id = ?';            $params[] = $id_mujer;        }        //Evitamos que el listado dure mucho en caso de no recibir ningún        //filtro pues se listarían TODAS las mujeres en la tabla de mujeres_avanzando        $id_caravana = ($id_caravana == NULL && $busqueda == NULL)? 1 : $id_caravana;        //Filtramos por caravana        if($id_caravana != NULL){            $sql .= ' AND c.id = ?';            $params[] = $id_caravana;        }        //Filtramos por caravana        if($soundex != NULL){            $sql .= ' AND soundex_nombre = ?';            $params[] = $soundex;        }        //Regresamos resultado        // self::executar($sql,$params);        /*        print_r($params);        echo $sql;        exit;        */      return array($sql,$params);                           }        /**     * Obtenemos listado de mujeres paginado     * @param  String $busqueda    Búsqueda a realizar     * @param  String $tipo_filtro Tipo de filtro para la búsqueda     * @param  int $activo Determinamos si queremos los activos, inactivos o ambos (predeterminado)     * @param  String $nombre  Nombre a buscar     * @param  String $paterno Apellido paterno a buscar     * @param  String $materno Apellido materno a buscar     * @param  String $curp  CURP a buscar     * @param  int $id_mujer Búsqueda por ID de la tabla mujeres_avanzando     * @param  int $id_caravana Búsqueda por ID de la tabla caravana     * @return Array Listado con los filtros aplicados     */    public static function listaMujer($busqueda=NULL,$tipo_filtro=NULL,      $activo = NULL,$nombre=null,$paterno=null,$materno=null,$curp=null,      $id_mujer = NULL,$id_caravana=NULL,$soundex = NULL)    {        list($sql,$params) = self::listaMujerGenerica($busqueda,$tipo_filtro,       $activo,$nombre,$paterno,$materno,$curp,$id_mujer,$id_caravana,$soundex);        //Regresamos resultado                return Paginador::paginar($sql,$params);              }        /**     * [listadoMujer description]     * @param  [type] $busqueda    [description]     * @param  [type] $tipo_filtro [description]     * @param  [type] $activo      [description]     * @param  [type] $nombre      [description]     * @param  [type] $paterno     [description]     * @param  [type] $materno     [description]     * @param  [type] $curp        [description]     * @param  [type] $id_mujer    [description]     * @param  [type] $id_caravana [description]     * @return [type]              [description]     */     public static function listadoMujer($busqueda=NULL,$tipo_filtro=NULL,      $activo = NULL,$nombre=null,$paterno=null,$materno=null,$curp=null,      $id_mujer=NULL,$id_caravana=NULL,$soundex = NULL)    {        list($sql,$params) = self::listaMujerGenerica($busqueda,$tipo_filtro,       $activo,$nombre,$paterno,$materno,$curp,$id_mujer,$id_caravana,$soundex);        //Regresamos resultado                return self::executar($sql,$params);            }    /**     * Obtenemos listado de los programas que tiene una mujer     * @param string $busqueda La cadena a buscar     * @param string $tipo_filtro Tipo de filtro       * @param string $nombre_propio Nombre propio     * @param string $paterno Apellido Paterno     * @param string $materno Apellido Materno     * @param string $id_cat_municipio Municipio     * @param string $id_cat_localidad Localidad     * @param string $cod_prog Código del programa     * @return array Resultado de la consulta paginada     * */    public static function listaProgMujer(    $busqueda=NULL,$tipo_filtro=NULL,$nombre_propio=NULL,$paterno=NULL,$materno=NULL,    $id_cat_municipio=NULL,$id_cat_localidad=NULL,$cod_prog=NULL,$curp=NULL)    {               //Si se cumple con alguno de los filtros        if($tipo_filtro != NULL || ($nombre_propio != NULL || $paterno !=NULL ||         $materno !=NULL || $id_cat_municipio !=NULL ||$id_cat_localidad !=NULL ||         $cod_prog !=NULL || $curp !=null)){                $sql =         'SELECT        m.id,        concat(ifnull(m.nombres,?),?,ifnull(m.paterno,?),?,ifnull(m.materno,?)) as nombre_completo,        m.nombres,         m.paterno,        m.materno,         m.curp,        DATE_FORMAT(m.fecha_nacimiento,?) as fecha_nacimiento,        d.ID_MUJERES_AVANZANDO,        mpo.NOM_MUN as municipio,        p.NOMBRE as programa        FROM `mujeres_avanzando` m        LEFT JOIN c_mujeres_avanzando_detalle d on d.ID_MUJERES_AVANZANDO = m.id        left join cat_municipio mpo on mpo.CVE_ENT_MUN = CONCAT(m.CVE_EDO_RES,m.id_cat_municipio)        LEFT JOIN c_servicio s on s.ID_C_SERVICIO = d.ID_C_SERVICIO        LEFT JOIN c_programa p on p.ID_C_PROGRAMA = s.ID_C_PROGRAMA        where 1          ';        $params = array('',' ','',' ','','%d/%m/%Y');        //Filtro de búsqueda        if ($busqueda !==NULL && $tipo_filtro !==NULL){                      if($tipo_filtro == 'nombre'){                 $alias=' concat(ifnull(m.nombres,?),?,ifnull(m.paterno,?),?,ifnull(m.materno,?)) ';                 $params = array_merge($params,array('',' ','',' ',''));                 $sql .=  ' AND '.$alias.' LIKE ? ';                            }else{                if($tipo_filtro == 'curp'){                                    $sql .=  ' AND m.curp like ? ';                  }                          }            $params[] = '%'.$busqueda.'%';               }        //Buscamos nombre propio                   if($nombre_propio !=null){          $sql .= ' AND m.nombres like ? ';          $params[] = '%'.$nombre_propio.'%';            }        //Apellido paterno        if($paterno !=null){          $sql .= ' AND m.paterno like ? ';          $params[] = '%'.$paterno.'%';            }        //Apellido materno        if($materno !=null){          $sql .= ' AND m.materno like ? ';             $params[] = '%'.$materno.'%';            }        //Municipio        if($id_cat_municipio !=null){          $sql .= 'and mpo.CVE_ENT_MUN  = ? ';          $params[] = '14'.$id_cat_municipio;            }        //Localidad         if($id_cat_localidad !=null){          $sql .= ' AND loc.CVE_EST_MUN_LOC = ? ';                     $params[] = '14'.$id_cat_municipio.$id_cat_localidad;            }                //CURP        if($curp !=null){          $sql .= ' AND m.curp = ? ';                     $params[] = $curp;            }                                               $sql.= 'GROUP BY 1';                return Paginador::paginar($sql,$params);       }else{        return  NULL;      }    }    /**     * Obtenemos información capturada del beneficiario para mostrar en su     * expediente     * @param  int $id_mujeres_avanzando Id del beneficiario a revisar     * @return array Resultado de la consulta     */    public static function expedienteMujer($id_mujeres_avanzando){     $sql = 'SELECT            m.id,            concat(ifnull(m.nombres,?),?,ifnull(m.paterno,?),?,ifnull(m.materno,?)) as nombre_completo,            DATE_FORMAT(m.fecha_nacimiento,?) as fecha_nacimiento,            m.nombres,            m.paterno,            m.materno,            m.curp,            m.curp_generada,                                    DATE_FORMAT(m.fecha_creado,?) as fecha_creado,            DATE_FORMAT(m.fecha_ultima_mod,?) as fecha_ultima_mod,            m.num_ext as numero_exterior,            m.num_int as numero_interior,            m.CODIGO as codigo,            m.desc_ubicacion as descripcion,            m.telefono as telefono,            m.genero as genero,            est.NOM_ENT as estado_residencia,            mpo.NOM_MUN as municipio_residencia,            ev.nombre as estado_civil,                                  p.nombre as pais,            estn.NOM_ENT as estado_de_nacimiento,            mpon.NOM_MUN as municipio_nacimiento,            m.escolaridad,            m.ocupacion            from mujeres_avanzando m            left join cat_estado est on m.CVE_EDO_RES = est.CVE_ENT            left join cat_municipio mpo on CONCAT(m.CVE_EDO_RES,m.id_cat_municipio) = mpo.CVE_ENT_MUN            left join estado_civil ev on m.id_estado_civil = ev.id            LEFT JOIN pais p on m.id_pais = p.id            LEFT JOIN cat_estado estn on m.id_cat_estado = estn.CVE_ENT            LEFT JOIN cat_municipio mpon on CONCAT(m.id_cat_estado,m.id_municipio_nacimiento) = mpon.CVE_ENT_MUN            where m.id = ?            ';            $params = array('',' ','',' ','','%d/%m/%Y','%d/%m/%Y','%d/%m/%Y',$id_mujeres_avanzando);                              //$expediente = $db->rawQuery($sql,$params);             return self::executar($sql,$params);            }     /**      * Calculamos edad a partir de la fecha de nacimiento      * @param  int $fecha_nacimiento [description]      * @return int Edad      */     public static function calcular_edad($fecha_nacimiento){                list($Y,$m,$d) = explode("-",$fecha_nacimiento);        return( date("md") < $m.$d ? date("Y")-$Y-1 : date("Y")-$Y );         }    /**    * Verificamos si hay algún homónimo en el sistema, deben enviarse    * todos los campos para realizar la búsqueda    * @param string $nombres Nombres propios    * @param string $paterno Apellido Paterno    * @param string $materno Apellido Materno    * @param string $fecha_nacimiento Fecha de Nacimiento    * @param int $id_municipio_nacimiento Municipio de Nacimiento    * @param int $id_cat_estado Estado de Nacimiento    * @param int $id_mujeres_avanzando ID del beneficiario (opcional)    *    * @return bool Regresa verdadero en caso de encontrar homónimo,    *              Regresa falso en caso de no encontrarlo o por no poner los campos obligatorios    */    public static function verificaHomonimo($nombres,$paterno,$materno,$fecha_nacimiento,    $id_municipio_nacimiento,$id_cat_estado,$id_mujeres_avanzando = null)    {        //Inicializamos la bandera        $homonimo = false;        //Verificamos que se tengan los campos obligatorios        if($nombres&&$paterno&&$materno&&$fecha_nacimiento&&            $id_municipio_nacimiento&&$id_cat_estado){            $sql =             'SELECT            id            from mujeres_avanzando            where 1            AND nombres = ?            and paterno = ?            and materno = ?            and fecha_nacimiento = ?            and id_municipio_nacimiento = ?            and id_cat_estado = ?';            $params = array($nombres,                            $paterno,                            $materno,                            $fecha_nacimiento,                            $id_municipio_nacimiento,                            $id_cat_estado);            //Agregamos condicion del id del beneficiario            if($id_mujeres_avanzando != NULL){                $sql .= ' and id != ? ';                $params[] = $id_mujeres_avanzando;            }            /*            echo $sql;            print_r($params);            exit;                        */            self::getInstance()->rawQuery($sql, $params);                      //print_r($beneficiario);            //exit;            //Verificamos si encontramos alguna coincidencia            $homonimo = (count($beneficiario) > 0 )? true : false;        }                      return $homonimo;    }    /**     * Generamos una curp ya sea para validarla o completar este campo     * @param  String $paterno Apellido Paterno     * @param  String $materno Apellido Materno     * @param  String $nombres Nombres propios     * @param  String $fecha_nacimiento Fecha de Nacimiento     * @param  String  $genero Género de la persona     * @param  int $id_cat_estado Estado de Origen     * @param  bool $omitir_digitos Omitimos dígitos finales     * @return String CURP generada     */    private static function generaCURP($paterno,$materno,$nombres,$fecha_nacimiento,        $genero,$id_cat_estado,$omitir_digitos = false){        //Importamos librerías        include_once($_SESSION['inc_path'].'libs/Curp.php');        include_once($_SESSION['inc_path'].'libs/Permiso.php');                    //Formateamos fecha        $newDate = date("d/m/Y", strtotime($fecha_nacimiento));                    //Quitamos acentos y símbolos raros del nombre completo                $paterno_curp=Permiso::limpiar(utf8_decode($paterno));        $materno_curp=Permiso::limpiar(utf8_decode($materno));        $nombres_curp=Permiso::limpiar(utf8_decode($nombres));        //Generamos CURP        $curp=Curp::generar_CURP(                    mb_strtoupper($paterno_curp,'UTF-8'),                    mb_strtoupper($materno_curp,"UTF-8"),                    mb_strtoupper($nombres_curp,"UTF-8"),                    $newDate,                    $genero,                    $id_cat_estado,                    $omitir_digitos);        return $curp;    }    /**     * Guardamos registro en la tabla Submódulo     * @param  Array $mujeres_avanzando Arreglo con los campos a guardar     * @param  int $id del Modulo a editar (opcional)     * @return int $msg_no No. de mensaje     */    public static function saveMujer($mujeres_avanzando,$id = null){        //print_r($mujeres_avanzando);        //exit;        //Variable que nos indica el mensaje generado al guardar el registro        $msg_no = 0;        //Indicamos predeterminadamente que insertaremos un registro        $db_accion = 'insert';        //CURP        $curp='';        /*Obtenemos cada una de las variables enviadas vía POST y las asignamos        a su respectiva variable. Por ejemplo         $id = $_POST['id'], $nombre = $_POST['nombre']*/        foreach($mujeres_avanzando as $key => $value):        ${$key} = self::getInstance()->real_escape_string($value);        endforeach;        //Obtenemos el id del usuario creador        $id_usuario = $_SESSION['usr_id'];        /*Si no esta creada la variable activo         predeterminadamente la guardamos = 1*/        if(!isset($activo) ){            $activo = 1 ;                    }                //variable que utilizaremos para guardar una posible curp_generada        $curp_generada='';        $es_curp_generada='NO';          $obj = NULL;        //No se envio CURP, se generará o se obtendra        if($curp == null && $id == NULL){                        //Indicamos que es CURP generada            $es_curp_generada='SI';            //Generamos CURP            $curp = self::generaCURP($paterno,                                     $materno,                                     $nombres,                                     $fecha_nacimiento,                                     $genero,                                     $id_cat_estado);            $curp_generada = $curp;        }                        //Campos obligatorios        if($nombres && $paterno && $fecha_nacimiento && $escolaridad && $ocupacion &&            $id_grado && $folio && $colonia && $calle && $num_ext && $id_cat_municipio && $CODIGO)        {                        //Quitamos vueltas de carro            $desc_ubicacion = trim(str_replace("\\r\\n"," ",$desc_ubicacion));                                              $insertData = array(                'nombres' => mb_strtoupper(trim($nombres),"UTF-8"),                'paterno' => mb_strtoupper(trim($paterno),"UTF-8"),                'materno' => mb_strtoupper(trim($materno),"UTF-8"),                'fecha_nacimiento' => $fecha_nacimiento,                'curp' => strtoupper($curp),                'curp_generada' => strtoupper($curp_generada),                'genero' => $genero,                'es_madre_soltera' => $es_madre_soltera,                'id_cat_estado' => $id_cat_estado,                'id_cat_municipio' => $id_cat_municipio,                //'id_cat_localidad' => $id_cat_localidad,                'fecha_creado' => date('Y-m-d H:i:s'),                'id_usuario_ultima_mod' => $id_usuario,                'activo' => $activo,                'escolaridad' => $escolaridad,                'ocupacion' => $ocupacion,                'id_estado_civil' => $id_estado_civil,                'id_usuario_creador' => $id_usuario,                'num_ext' => $num_ext,                'num_int' => mb_strtoupper(trim($num_int),"UTF-8"),                'desc_ubicacion' => mb_strtoupper($desc_ubicacion,"UTF-8"),                'CVE_EDO_RES' => $CVE_EDO_RES,                'CODIGO' => $CODIGO,                'id_pais' => $id_pais,                //'ciudadano_mex'=>$ciudadano,                'telefono'=>$telefono,                'id_municipio_nacimiento'=>$id_municipio_nacimiento,                'domicilio' => md5($CVE_TIPO_VIAL.$CVE_VIA.$num_ext),                'soundex_nombre' => self::getInstance()->soundex($nombres.' '.$paterno),                'ID_C_MODULO' => $ID_C_MODULO,                'PUNTOS_OTORGADOS' => $PUNTOS_OTORGADOS,                'PUNTOS_UTILIZADOS' => $PUNTOS_UTILIZADOS,                'id_grado' => $id_grado,                'cartilla' => $cartilla,                'id_entrevista' => $id_entrevista,                'folio' => $folio,                'programa' => $programa,                'id_caravana' => $id_caravana,                'visita' => $visita,                'calle' => $calle,                'colonia' => $colonia,                'nivel' => $nivel,                'calidad_dieta' => $calidad_dieta,                'diversidad' => $diversidad,                'variedad' => $variedad,                'elcsa'=> $elcsa                 );                                                    //Nos aseguramos que el apellido materno se guarde vacío            if($id >0){                                if($materno == ""){                  $data = Array (                    'materno' => ''                    );                   self::getInstance()->where ('id', $id);                   self::getInstance()->update ('mujeres_avanzando', $data);                  }                  //Descartamos apellido materno                  //unset($insertData['materno']);                                      //Si vamos a edtiar registro, borraremos variables de creación                  unset($insertData['id_usuario_creador']);                  unset($insertData['fecha_creado']);                            }else{                //Obtenemos el folio de acuerdo al conteo (solo lo generamos al crear)                //nuevo registro                                    $num_folio =  self::getNumFolio($folio);                   $insertData['num_folio'] = $num_folio;            }                                //Si recibimos id para editar            if(intval($id)>0){                //Indicamos que haremos un update                $db_accion = 'update';                                //Agregamos condición para indicar qué id se actualiza                self::getInstance()->where('id',$id);            }                        //print_r($insertData);            //exit;                        //Quitamos del arreglo los valores vacíos en caso de            //hacer carga masiva                        if($masiva == 1){              $insertData = array_filter($insertData,                                          create_function('$a','return preg_match("#\S#", $a);'));            }                        //Iniciamos transacción            self::getInstance()->startTransaction();                              $obj = self::getInstance()->{$db_accion}('mujeres_avanzando', $insertData);                        if(!$obj){                /*Si se hace un update, no se guardaron campos nuevos, caso contrario                NO se está guardando el registro por tener campos incompletos o incorrectos*/                $msg_no = ($db_accion == 'update')?  14 : 3;                /*                echo $msg_no;                print_r($insertData);                exit;                */                               //Cancelamos los posibles campos afectados                self::getInstance()->rollback();            }else{                //Campos guardados correctamente                $msg_no = 1;                   //Obtenemos el id del registro creado o editado                $id = ($db_accion == 'insert')?self::getInstance()->getInsertId():$id;                //Si se está dando de alta un miembro que es familiar no titular, guardamos                //el folio que le corresponde                if($id_familiar > 0){                                $datos = Array (                    'cartilla' => $folio.'-'.$num_folio                     );                              self::getInstance()->where ('id', $id_familiar);                self::getInstance()->update ('familiares_mujer', $datos);                }                //Concatenamos curp generada para saber si se guardo la CURP o la Generada                $curp = $es_curp_generada.$curp;                 //Guardamos campos afectados en la tabla                self::getInstance()->commit();                           }             }else{            //'Campos Incompletos'            $msg_no = 2;                     }                      //Regresamos el mensaje, CURP y el id generado/modificado        return array($msg_no,strtoupper($curp),$id);    }    /**     * Obtenemos un registro medianre su folio     * @param  int $folio_buscar Folio a buscar     * @return Array               Registro     */    public function get_by_folio($folio_buscar,$num_folio = NULL){      $mujeres_avanzando = NULL;      if($num_folio){        self::getInstance()->where('num_folio',$num_folio);      }      self::getInstance()->where('folio',$folio_buscar)                              ->orderBy("id","desc");      $mujeres_avanzando = self::getInstance()->getOne('mujeres_avanzando');      return $mujeres_avanzando;    }    /**     * Obtenemos un registro medianre su folio     * @param  int $folio_buscar Folio a buscar     * @return Array               Registro     */    public function get_by_soundex_folio($soundex,$folio = NULL){      $mujeres_avanzando = NULL;            if($folio){        self::getInstance()->where('folio',$folio);      }      self::getInstance()->where('soundex_name',$soundex);      $mujeres_avanzando = self::getInstance()->getOne('mujeres_avanzando');      return $mujeres_avanzando;    }    /**     * Obtenemos un registro medianre su nombre usando soundex y su fecha de     * nacimiento     * @param  int $folio_buscar Folio a buscar     * @return Array               Registro     */    public function get_by_soundex_fecha($soundex,$fecha_nacimiento = NULL){      $mujeres_avanzando = NULL;            if($fecha_nacimiento){        self::getInstance()->where('fecha_nacimiento',$fecha_nacimiento);      }      self::getInstance()->where('soundex_nombre',$soundex);      $mujeres_avanzando = self::getInstance()->getOne('mujeres_avanzando');      return $mujeres_avanzando;    }      /**     * Obtenemos el folio del registro, ya sea si es nuevo o el siguiente     * @param  char $folio_buscar Folio a buscar     * @return char $folio Folio correspondiente     */    public function getNumFolio($folio_buscar){      $folio = self::get_by_folio($folio_buscar);                 if($folio !=null){        $num_folio = null;        $num_folio = intval($folio['num_folio']);        $num_folio ++;        $numero_folio=str_pad($num_folio,2,"0",STR_PAD_LEFT);      }            return $numero_folio;              }    /**     * Mostramos el total     * @param  date $fecha_creacion_ini Fecha de creación de inicio     * @param  date $fecha_creacion_fin Fecha de creación de fin     * @return Array Listado con resultados     */    public function totalRepCarGrado($fecha_creacion_ini = null,$fecha_creacion_fin = null){        $sql = 'SELECT                SUM(m.id_grado = 1) AS severa,                SUM(m.id_grado = 2) AS moderada,                SUM(m.id_grado = 3) AS leve,                SUM(m.id_grado = 4) AS segura,                COUNT(*) AS total                FROM                mujeres_avanzando m                LEFT JOIN caravana c ON m.id_caravana = c.id                WHERE ? ';        $params = array(1);                         //Verificamos si se quieren filtrar por fecha        if($fecha_creacion_ini !== NULL){            $sql .= ' and c.fecha_instalacion BETWEEN ? AND ? ';            $params[] = $fecha_creacion_ini;                         $params[] = ($fecha_creacion_fin !== NULL)? $fecha_creacion_fin : $fecha_creacion_ini ;        }                $Arreglo = self::executar($sql,$params);        /*        print_r($params);        echo $sql;                */               return $Arreglo[0];    }    /**     * Reporte donde mostramos el total de beneficiarias     * por cada grado, agrupado por caravana mediante un rango opcional     * @param  date $fecha_creacion_ini Fecha de creación de inicio     * @param  date $fecha_creacion_fin Fecha de creación de fin     * @return Array Listado      */    public function repCarGrado($fecha_creacion_ini = null,$fecha_creacion_fin = null){             $sql = 'SELECT                c.id,                c.descripcion AS caravana,                c.fecha_instalacion,                SUM(m.id_grado = 1) AS severa,                SUM(m.id_grado = 2) AS moderada,                SUM(m.id_grado = 3) AS leve,                SUM(m.id_grado = 4) AS segura,                COUNT(*) AS total                FROM mujeres_avanzando m                LEFT JOIN caravana c ON m.id_caravana = c.id                 WHERE ? ';                                $params = array(1);                        //Verificamos si se quieren filtrar por fecha        if($fecha_creacion_ini !== NULL){            $sql .= ' and c.fecha_instalacion BETWEEN ? AND ? ';            $params[] = $fecha_creacion_ini;                         $params[] = ($fecha_creacion_fin !== NULL)? $fecha_creacion_fin : $fecha_creacion_ini ;        }                  //Ordenamos por caravana        $sql .= ' GROUP BY c.id ';                /*         print_r($params);        echo $sql;        */        return self::executar($sql,$params);    }        /**     * Armamos listado de cartillas entregadas     * @param  int $id_mujeres_avanzando Id del beneficiario a revisar     * @return array Resultado de la consulta     */    private static function reporteCartillas($id_caravana = NULL,$fecha_caravana = NULL){            $sql = 'SELECT                     m.folio,                    m.id_entrevista,                    m.id_grado,                    g.grado,                    DATE(m.fecha_foto) as fecha_foto,                    m.nombres,m.paterno,m.materno,                    m.fecha_nacimiento,m.telefono,                    m.calle,m.num_ext,m.num_int,m.colonia,m.CODIGO,c.NOM_MUN as municipio                    FROM `mujeres_avanzando` m                     LEFT JOIN cat_municipio c on c.CVE_ENT_MUN = CONCAT(?,m.id_cat_municipio)                    left join grado g on g.id = m.id_grado                    WHERE 1                    AND m.fecha_foto is not null ';            $params = array('14');            if($id_caravana != NULL){                $sql .= ' AND m.id_caravana = ? ';                $params[] = $id_caravana;            }						if($fecha_caravana != NULL){                $sql .= ' AND DATE(m.fecha_foto) = ? ';                $params[] = $fecha_caravana;            }			            return array($sql,$params);    }    /**     * Obtenemos listado de cartillas entregadas     * @param  int $id_mujeres_avanzando Id del beneficiario a revisar     * @return array Resultado de la consulta     */    public static function repCartillasEntr($id_caravana = NULL,$fecha_caravana = NULL){        $lista = NULL;        if($id_caravana != NULL){                list($sql,$params) = self::reporteCartillas($id_caravana,$fecha_caravana);            $lista = self::executar($sql,$params);        }                return $lista;            }    /**     * Obtenemos listado de cartillas entregadas PAGINADO     * @param  int $id_mujeres_avanzando Id del beneficiario a revisar     * @return array Resultado de la consulta     */    public static function repCartillasEntrPag($id_caravana = NULL,$fecha_caravana = NULL){         $lista = NULL;        if($id_caravana != NULL){                list($sql,$params) = self::reporteCartillas($id_caravana,$fecha_caravana);            $lista = Paginador::paginar($sql,$params);        }                return $lista;    }    /**     * Obtenemos los folios emitidos en cada caravana     * @return [type] [description]     */    public function folio_car($fecha_creacion = NULL){      $sql = 'SELECT              c.id,              c.descripcion as caravana,              COUNT(m.id) as folios_car              FROM `mujeres_avanzando` m              LEFT JOIN caravana c on m.id_caravana = c.id              where ? ';       //Parámetros de la sentencia        $params = array(1);        //Verificamos si se quieren filtrar por caravana        if($fecha_creacion !== NULL){            $sql .= ' AND date(m.fecha_foto) = ?';            $params[] = $fecha_creacion;        }        //Ordenamos por caravana        $sql .= ' GROUP BY c.id ';        //Obtenemos los datos del arreglo        $arr = self::executar($sql,$params);          $m = array();        //Creamos arreglo poniendo como valor asociativo        //el índice de cada valor         foreach ($arr as $key => $value):          $m[$value['id']] = $value;        endforeach;        return $m;    }    /**     * Obtenemos total de folios emitidos en cada caravana     * [total_folios_car description]     * @return [type] [description]     */    public function total_folios_car(){        $sql = 'SELECT                COUNT(m.id) as total_folios_car                FROM `mujeres_avanzando` m                LEFT JOIN caravana c on m.id_caravana = c.id                where 1 ';                        $result = self::executar($sql,null);        $result = $result[0];        return $result;    }       /**     * Obtenemos total de cartillas entregadas por caravana     * @param  date $fecha_creacion     * @return Array     */    public function cartillas_car($fecha_creacion = NULL){                $sql = 'SELECT                c.id,                c.descripcion as caravana,                COUNT(m.fecha_foto) as cartilla_car                FROM `mujeres_avanzando` m                LEFT JOIN caravana c on m.id_caravana = c.id                where ? ';        //Parámetros de la sentencia        $params = array(1);        //Verificamos si se quieren filtrar por caravana        if($fecha_creacion !== NULL){            $sql .= ' AND date(m.fecha_foto) = ?';            $params[] = $fecha_creacion;        }        //Ordenamos por caravana        $sql .= ' GROUP BY c.id ';        return self::executar($sql,$params);    }    /**    * Obtenemos total de cartillas emitidas    * @return [type] [description]    */    public function total_cartillas_car(){        $sql = 'SELECT                 COUNT(m.fecha_foto) as total_cartilla_car                FROM `mujeres_avanzando` m                LEFT JOIN caravana c on m.id_caravana = c.id                where m.fecha_foto is not null ';                        $result = self::executar($sql,null);        $result = $result[0];        return $result;    }        /**     * Obtenemos las cartillas entregadas en la caravana     * @param  [type] $fecha_creacion [description]     * @return [type]                 [description]     */    public function cartillas_en_car($fecha_creacion = NULL){            $sql = 'SELECT               cv.id,              cv.descripcion,              IFNULL(x.en_car,0) as en_car               FROM caravana cv              LEFT JOIN (                SELECT                c.id,                c.descripcion as caravana,                IFNULL(COUNT(m.fecha_foto),0) as en_car                FROM `mujeres_avanzando` m                LEFT JOIN caravana c on m.id_caravana = c.id                where ?                 and m.fecha_foto is not null                 and date(m.fecha_foto) = c.fecha_instalacion ';       //Parámetros de la sentencia        $params = array(1);        //Verificamos si se quieren filtrar por caravana        if($fecha_creacion !== NULL){            $sql .= ' AND date(m.fecha_foto) = ?';            $params[] = $fecha_creacion;        }        //Ordenamos por caravana        $sql .= ' GROUP BY c.id )  x on cv.id = x.id ';        //Obtenemos los datos del arreglo        $arr = self::executar($sql,$params);          $m = array();        //Creamos arreglo poniendo como valor asociativo        //el índice de cada valor         foreach ($arr as $key => $value):          $m[$value['id']] = $value;        endforeach;        return $m;    }      /**    * Obtenemos total de cartillas emitidas en caravana    * @return [type] [description]    */    public function total_cartillas_en_car(){        $sql = 'SELECT                COUNT(m.fecha_foto) as total_en_car                FROM `mujeres_avanzando` m                LEFT JOIN caravana c on m.id_caravana = c.id                where 1                and m.fecha_foto is not null                 and date(m.fecha_foto) = c.fecha_instalacion ';                        $result = self::executar($sql,null);        $result = $result[0];        return $result;    }      /**     * Obtenemos las cartillas entregadas fuera de caravana (extratemporal)     * @param  [type] $fecha_creacion [description]     * @return [type]                 [description]     */    public function cartillas_ext($fecha_creacion = NULL){      $sql = 'SELECT               cv.id,              cv.descripcion,              IFNULL(x.total_foto_ext,0) as foto_ext               FROM caravana cv              LEFT JOIN (SELECT                            c.id                            ,COUNT(m.fecha_foto) as total_foto_ext                            FROM `mujeres_avanzando` m                            LEFT JOIN caravana c on m.id_caravana = c.id                                                            where ? ';                            //Parámetros de la sentencia                            $params = array(1);                            //Verificamos si se quieren filtrar por caravana                            if($fecha_creacion !== NULL){                                $sql .= ' AND date(m.fecha_foto) = ?';                                $params[] = $fecha_creacion;                            }                            $sql .= ' AND date(m.fecha_foto) != c.fecha_instalacion                                       GROUP BY c.id) x on cv.id = x.id ';        //Obtenemos los datos del arreglo        $arr = self::executar($sql,$params);          $m = array();        //Creamos arreglo poniendo como valor asociativo        //el índice de cada valor         foreach ($arr as $key => $value):          $m[$value['id']] = $value;        endforeach;        return $m;    }      /**    * Obtenemos total de cartillas emitidas en caravana    * @return [type] [description]    */    public function total_cartillas_ext(){        $sql = 'SELECT                COUNT(m.fecha_foto) as total_foto_ext                FROM `mujeres_avanzando` m                LEFT JOIN caravana c on m.id_caravana = c.id                                                where 1                             and date(m.fecha_foto) != c.fecha_instalacion ';                        $result = self::executar($sql,null);        $result = $result[0];        return $result;    }     /**     * Función genérica para el listado de beneficiarios involucrados en el cambio     * del grado de inseguridad alimentaria (GIA)     * @param  string $lista Lista de beneficarias     * @return [type]        [description]     */    private static function listCambioGIA($id_caravana = NULL){            //Obtenemos listado de ID de mujeres      $lista = HistoricoGIA::beneficiariasCambio($id_caravana);      $sql = '';      $params = array();      //En caso de que el listado no sea nulo      if($lista != NULL){            $sql = 'SELECT              m.id as id_mujeres_avanzando,              c.descripcion as caravana,              m.nombres,              m.paterno,              m.materno,              m.folio,              g.grado as grado,              n.nivel as nivel,              cd.calidad_dieta as calidad_dieta,              d.diversidad as diversidad,              v.variedad as variedad,              e.elcsa as elcsa               FROM `mujeres_avanzando` m              LEFT JOIN caravana c on c.id = m.id_caravana              LEFT JOIN grado g on m.id_grado = g.id              LEFT JOIN nivel_socioeconomico n on m.nivel = n.id              LEFT JOIN calidad_dieta cd on m.calidad_dieta = cd.id              LEFT JOIN diversidad d on m.diversidad = d.id              LEFT JOIN variedad v on m.variedad = v.id              LEFT JOIN elcsa e on m.elcsa = e.id              WHERE m.id_caravana = ?              AND m.id IN ('.$lista.') ';              $params = array($id_caravana);                    }      return array($sql,$params);     }    /**     * Obtenemos listado de beneficiarios involucrados en el cambio     * del grado de inseguridad alimentaria (GIA)     * @param  string $lista Lista de beneficarias     * @return [type]        [description]     */    public static function listaCambioGIA($id_caravana = NULL){            list($sql,$params) = self::listCambioGIA($id_caravana);            return self::executar($sql,$params);    }    /**     * Obtenemos listado PAGINADO de beneficiarios involucrados en el cambio     * del grado de inseguridad alimentaria (GIA)     * @param  string $lista Lista de beneficarias     * @return [type]        [description]     */    public static function listadoCambioGIA($id_caravana = NULL){            //variables      $sql = null;      $params = null;      $lista = null;      $p = null;      //Obtenemos consulta y parametros      list($sql,$params) = self::listCambioGIA($id_caravana);                  //Obtenemos listado y paginador      if($sql != null && count($params) > 0){        list($lista,$p)= Paginador::paginar($sql,$params);      }      return array($lista,$p);    }    /**     * Obtenemos listado de beneficiarias que tuvieron algún cambio en alguno     * de sus grados GIA acorde a la tabla mujeres_avanzando. Aquí siempre     * estará el grado más actual     * @param  [type] $id_caravana [description]     * @param  [type] $visita      [description]     * @return [type]              [description]     */    public static function listaActualGIA($id_caravana = NULL,$visita = NULL){            $sql = 'SELECT               m.id as id_mujeres_avanzando,              h.fecha_creado,              m.folio,              g.grado as grado,              n.nivel as nivel,              cd.calidad_dieta as calidad_dieta,              d.diversidad as diversidad,              v.variedad as variedad,              e.elcsa as elcsa               FROM `mujeres_avanzando` m              INNER JOIN historico_gia h on h.id_mujeres_avanzando = m.id              LEFT JOIN caravana c on c.id = m.id_caravana              LEFT JOIN grado g on m.id_grado = g.id              LEFT JOIN nivel_socioeconomico n on m.nivel = n.id              LEFT JOIN calidad_dieta cd on m.calidad_dieta = cd.id              LEFT JOIN diversidad d on m.diversidad = d.id              LEFT JOIN variedad v on m.variedad = v.id              LEFT JOIN elcsa e on m.elcsa = e.id              WHERE m.id_caravana = ?              and h.visita = ?              -- GROUP BY m.id              ORDER BY m.id ';              $params = array($id_caravana,$visita);              return Paginador::paginar($sql,$params);    }        /**     * Lista de mujeres que no fueron encontradas     * @param  integer $id_caravana [description]     * @return [type]               [description]     */    public static function listaNoEnc($no_coincide = null){            //Obtenemos consulta y parámetros      list($sql,$params) = self::listNoEnc($no_coincide);      //Regresamos listado      return self::executar($sql,$params);    }    /**     * Listado PAGINADO de mujeres que no fueron encontradas     * @param  integer $id_caravana [description]     * @return [type]               [description]     */    public static function listadoNoEnc($no_coincide = null){            //Obtenemos consulta y parámetros      list($sql,$params) = self::listNoEnc($no_coincide);       //Regresamos listado paginado      return Paginador::paginar($sql,$params);    }    /**     * Listado de mujeres que no fueron encontradas     * @param  integer $id_caravana [description]     * @return [type]               [description]     */    private static function listNoEnc($no_coincide = null){            $sql = "SELECT               m.id,              case WHEN (LENGTH(m.num_folio) > 1) THEN               CONCAT(m.folio,?,m.num_folio)ELSE              m.folio end as folio_compuesto,              m.nombres,              m.paterno,              m.materno,              c.descripcion as caravana              FROM mujeres_avanzando m              LEFT JOIN caravana c on c.id = m.id_caravana              WHERE ? ";      $params = array('-',1);       if($no_coincide != NULL){                     //Recorremos listado de mujeres no encontradas          foreach ($no_coincide as $key => $value):            $no_enc .= $value.',';          endforeach;          //Quitamos última coma          $no_enc = substr($no_enc, 0,-1);                    //ponemos en consulta          if($no_enc){              $sql .=  ' AND m.id IN('.$no_enc.') ';          }       }           //Regresamos consulta y parámetros      return array($sql,$params);    }    /**    *Verificamos si la cartilla ya fue impresa previamente    **/    public static function verifImpCartilla($folio = ""){            $sql = "SELECT l.id              FROM mujeres_avanzando m              LEFT JOIN `log_mujeres_avanzando` l on l.folio = m.folio                                                   and l.fecha_impresion IS NOT NULL              where 1              and m.fecha_foto is not null ";      $params = array();      //Verificamos si se quieren filtrar por caravana      if($folio != ""){            $sql .= ' AND m.folio = ?';            $params[] = $folio;      }      $sql .= " LIMIT 0, 1";      //obtenemos el registro      $registro = self::executar($sql,$params);            $resultado = null;            if(isset($registro[0])){        $registro = $registro[0];        //procesamos datos        $resultado = ($registro["id"] != null)? $registro['id'] : null;              //echo "Resultado: ".$resultado;            }            return $resultado;    }}?>